a ka code
def knapsack_01(value, weight, capacity):
    n = len(value)
    dp = [[0 for _ in range(capacity+1)] for _ in range(n+1)]
    for i in range(1, n+1):
        for w in range(1, capacity+1):
            if weight[i-1] > w:
                dp[i][w] = dp[i-1][w]
            else:
                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight[i-1]] + value[i-1])

    max_val = dp[n][capacity]

    selected_items = []
    w = capacity
    for i in range(n, 0, -1):
        if dp[i][w] != dp[i-1][w]:
            selected_items.append(i-1)
            w -= weight[i-1]

    return max_val, selected_items[::-1]

n = int(input("Enter Number of Items: "))
val = input("Enter values of {} items in Order: ".format(n)).split()
value = [int(v) for v in val]

wei = input("Enter Weights of {} items in Order: ".format(n)).split()
weight = [int(w) for w in wei]

capacity = int(input("Enter Capacity: "))

mv, si = knapsack_01(value, weight, capacity)
print(mv)
print(si)
---------&&------------------_----

def knapsack_01(value, weight, capacity):
    n = len(value)
    dp = [[0 for _ in range(capacity+1)] for _ in range(n+1)]
    for i in range(1, n+1):
        for w in range(1, capacity+1):
            if weight[i-1] > w:
                dp[i][w] = dp[i-1][w]
            else:
                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight[i-1]] + value[i-1])

    max_val = dp[n][capacity]

    selected_items = []
    w = capacity
    for i in range(n, 0, -1):
        if dp[i][w] != dp[i-1][w]:
            selected_items.append(i-1)
            w -= weight[i-1]

    return max_val, selected_items[::-1]

n = int(input("Enter Number of Items: "))
val = input("Enter values of {} items in Order: ".format(n)).split()
value = [int(v) for v in val]

wei = input("Enter Weights of {} items in Order: ".format(n)).split()
weight = [int(w) for w in wei]

capacity = int(input("Enter Capacity: "))

mv, si = knapsack_01(value, weight, capacity)
print(mv)
print(si)# 0-1 Knapsack ( Dynamic Programming ) galat bataya a ne

def knapSack(W, wt, val): 
    n=len(val)
    table = [[0 for x in range(W + 1)] for x in range(n + 1)] 
 
    for i in range(n + 1): 
        for j in range(W + 1): 
            if i == 0 or j == 0: 
                table[i][j] = 0
            elif wt[i-1] <= j: 
                table[i][j] = max(val[i-1] + table[i-1][j-wt[i-1]],  table[i-1][j]) 
            else: 
                table[i][j] = table[i-1][j] 
   
    return table[n][W] 
 
val = [50,100,150,200]
wt = [8,16,32,40]
W = 64
 
print(knapSack(W, wt, val))

----------------------------------------------------------------------------------------------------------------------------------------------------------------
# 0-1 Knapsack ( Branch and Bound )

from queue import PriorityQueue

class Item:
    def __init__(self, weight, value):
        self.weight = weight
        self.value = value

class Node:
    def __init__(self, level, profit, weight):
        self.level = level      # Level of the node in the decision tree (or index in arr[])
        self.profit = profit    # Profit of nodes on the path from root to this node (including this node)
        self.weight = weight    # Total weight at the node

    def __lt__(self, other):
        return other.weight < self.weight  # Compare based on weight in descending order

def bound(u, n, W, arr):
    # Calculate the upper bound of profit for a node in the search tree
    if u.weight >= W:
        return 0

    profit_bound = u.profit
    j = u.level + 1
    total_weight = u.weight

    # Greedily add items to the knapsack until the weight limit is reached
    while j < n and total_weight + arr[j].weight <= W:
        total_weight += arr[j].weight
        profit_bound += arr[j].value
        j += 1

    # If there are still items left, calculate the fractional contribution of the next item
    if j < n:
        profit_bound += int((W - total_weight) * arr[j].value / arr[j].weight)

    return profit_bound

def knapsack(W, arr, n):
    # Sort items based on value-to-weight ratio in non-ascending order
    arr.sort(key=lambda x: x.value / x.weight, reverse=True)
    
    priority_queue = PriorityQueue()
    u = Node(-1, 0, 0)  # Dummy node at the starting
    priority_queue.put(u)

    max_profit = 0

    while not priority_queue.empty():
        u = priority_queue.get()

        if u.level == -1:
            v = Node(0, 0, 0)  # Starting node
        elif u.level == n - 1:
            continue  # Skip if it is the last level (no more items to consider)
        else:
            v = Node(u.level + 1, u.profit, u.weight)  # Node without considering the next item

        v.weight += arr[v.level].weight
        v.profit += arr[v.level].value

        # If the cumulated weight is less than or equal to W and profit is greater than previous profit, update maxProfit
        if v.weight <= W and v.profit > max_profit:
            max_profit = v.profit

        v_bound = bound(v, n, W, arr)
        # If the bound value is greater than current maxProfit, add the node to the priority queue for further consideration
        if v_bound > max_profit:
            priority_queue.put(v)

        # Node considering the next item without adding it to the knapsack
        v = Node(u.level + 1, u.profit, u.weight)
        v_bound = bound(v, n, W, arr)
        # If the bound value is greater than current maxProfit, add the node to the priority queue for further consideration
        if v_bound > max_profit:
            priority_queue.put(v)

    return max_profit

# Driver program to test the above function
W = 10
arr = [
    Item(2, 40),
    Item(3.14, 50),
    Item(1.98, 100),
    Item(5, 95),
    Item(3, 30)
]
n = len(arr)

max_profit = knapsack(W, arr, n)
print("Maximum possible profit =", max_profit)
----------------------------------------------------------------------------------------------------------------------------------
// java branch and bound
import java.util.PriorityQueue;

class Item {
    double weight;
    int value;

    public Item(double weight, int value) {
        this.weight = weight;
        this.value = value;
    }
}

class Node implements Comparable<Node> {
    int level;
    int profit;
    double weight;

    public Node(int level, int profit, double weight) {
        this.level = level;
        this.profit = profit;
        this.weight = weight;
    }

    @Override
    public int compareTo(Node other) {
        return Double.compare(other.weight, this.weight);  // Max heap based on weight
    }
}

public class KnapsackBranchAndBound {

    public static double bound(Node u, int n, double W, Item[] arr) {
        // Calculate upper bound of profit for a node in the search tree
        if (u.weight >= W) {
            return 0;
        }

        double profitBound = u.profit;
        int j = u.level + 1;
        double totalWeight = u.weight;

        // Greedily add items to the knapsack until the weight limit is reached
        while (j < n && totalWeight + arr[j].weight <= W) {
            totalWeight += arr[j].weight;
            profitBound += arr[j].value;
            j++;
        }

        // If there are still items left, calculate the fractional contribution of the next item
        if (j < n) {
            profitBound += (W - totalWeight) * arr[j].value / arr[j].weight;
        }

        return profitBound;
    }

    public static int knapsack(double W, Item[] arr, int n) {
        // Sort items based on value-to-weight ratio in descending order
        java.util.Arrays.sort(arr, (a, b) -> Double.compare(b.value / b.weight, a.value / a.weight));

        PriorityQueue<Node> priorityQueue = new PriorityQueue<>();
        Node u = new Node(-1, 0, 0);  // Dummy node at the start
        priorityQueue.add(u);

        int maxProfit = 0;

        while (!priorityQueue.isEmpty()) {
            u = priorityQueue.poll();

            if (u.level == -1) {
                // Start from the root node
                Node v = new Node(0, 0, 0);
                priorityQueue.add(v);
            } else if (u.level == n - 1) {
                continue;  // Skip if it is the last level (no more items to consider)
            } else {
                // Node including the next item
                Node v = new Node(u.level + 1, u.profit + arr[u.level + 1].value, u.weight + arr[u.level + 1].weight);

                // If the cumulated weight is less than or equal to W and profit is greater than previous profit, update maxProfit
                if (v.weight <= W && v.profit > maxProfit) {
                    maxProfit = v.profit;
                }

                // Get upper bound on profit and add the node to the queue if it's promising
                double vBound = bound(v, n, W, arr);
                if (vBound > maxProfit) {
                    priorityQueue.add(v);
                }

                // Node without including the next item
                v = new Node(u.level + 1, u.profit, u.weight);
                vBound = bound(v, n, W, arr);
                if (vBound > maxProfit) {
                    priorityQueue.add(v);
                }
            }
        }
        return maxProfit;
    }

    public static void main(String[] args) {
        double W = 10;
        Item[] arr = {
            new Item(2, 40),
            new Item(3.14, 50),
            new Item(1.98, 100),
            new Item(5, 95),
            new Item(3, 30)
        };
        int n = arr.length;

        int maxProfit = knapsack(W, arr, n);
        System.out.println("Maximum possible profit = " + maxProfit);
    }
}

//KnapsackBranchAndBound

